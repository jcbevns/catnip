// }

	// another  one

	// if false {

	// 	var loF = dividers[2]
	// 	var hiF = math.Min(dividers[4], sp.sampleRate/2)

	// 	var minLog = math.Log10(loF)
	// 	var maxLog = math.Log10(hiF)
	// 	var bandWidth = (maxLog - minLog) / float64(bins)

	// 	// var minIdx = sp.freqToIdx(loF, math.Floor)
	// 	// var maxIdx = sp.freqToIdx(hiF, math.Round)

	// 	for xB := 0; xB <= bins; xB++ {
	// 		var fbL = sp.freqToIdx(math.Pow(10.0, (float64(xB)*bandWidth)+minLog), math.Floor)
	// 		sp.bins[xB].floorFFT = fbL

	// 		if xB > 0 {
	// 			var lfbL = sp.bins[xB-1].floorFFT
	// 			if lfbL == fbL {
	// 				fbL++
	// 			}
	// 			sp.bins[xB-1].ceilFFT = fbL
	// 			sp.bins[xB-1].widthFFT = fbL - lfbL
	// 		}
	// 	}
	// }

	// if true {

	// var loF = dividers[2]
	// var hiF = math.Min(dividers[4], sp.sampleRate/2)

	// var minLog = math.Log10(loF)
	// var maxLog = math.Log10(hiF)
	// var bandWidth = (maxLog - minLog) / float64(bins)

	// var minIdx = sp.freqToIdx(loF, math.Floor)
	// var maxIdx = sp.freqToIdx(hiF, math.Round)

	// for idx := minIdx; idx < maxIdx && idx < sp.fftSize; idx++ {

	// }
	// }

	// another attempt

	// if true {

	// var lo = (dividers[1])
	// var hi = dividers[4]

	// var cF = math.Log10(lo/hi) / ((1 / float64(bins)) - 1)

	// var getBinBase = func(b int) int {
	// 	var vFreq = ((float64(b+1) / float64(bins)) * cF) - cF
	// 	vFreq = (math.Pow(10.0, vFreq) * hi)
	// 	return int(math.Floor(vFreq))
	// }

	// for xB := 0; xB <= bins; xB++ {

	// 	// sp.bins[xB].floorFFT =
	// 	sp.bins[xB].floorFFT = getBinBase(xB)
	// 	sp.bins[xB].ceilFFT = getBinBase(xB + 1)
	// 	sp.bins[xB].widthFFT = sp.bins[xB].ceilFFT - sp.bins[xB].floorFFT + 1

	// 	if xB > 0 {
	// 		if sp.bins[xB-1].floorFFT >= sp.bins[xB].floorFFT {
	// 			sp.bins[xB].floorFFT = sp.bins[xB-1].floorFFT + 1

	// 			if xB > 1 {
	// 				sp.bins[xB].floorFFT += sp.bins[xB-1].floorFFT
	// 				sp.bins[xB].floorFFT -= sp.bins[xB-2].floorFFT + 1
	// 			}
	// 		}

	// 	}
	// }
	// }



// var fBins = float64(bins)

// var bassRange = math.Log10(dividers[2]) - math.Log10(dividers[1])
// var midRange = math.Log10(dividers[3]) - math.Log10(dividers[2])
// var trebRange = math.Log10(dividers[4]) - math.Log10(dividers[3])

// var total = bassRange + midRange + trebRange
// var bassRatio = bassRange / total
// var midRatio = midRange / total
// var trebRatio = trebRange / total
// var bassBins = fBins * bassRatio
// var midBins = fBins * midRatio
// var trebBins = fBins * trebRatio

// fmt.Println(bassRange, midRange, trebRange)
// fmt.Println(bassRatio, midRatio, trebRatio)
// fmt.Println(bassBins, midBins, trebBins)

// var bassRange = sp.freqToIdx(dividers[2], math.Round) - sp.freqToIdx(dividers[1], math.Floor)
// var midRange = sp.freqToIdx(dividers[3], math.Round) - sp.freqToIdx(dividers[2], math.Floor)
// var trebRange = sp.freqToIdx(dividers[4], math.Round) - sp.freqToIdx(dividers[3], math.Floor)

// var total = float64(bassRange + midRange + trebRange)
// var bassRatio = float64(bassRange) / total
// var midRatio = float64(midRange) / total
// var trebRatio = float64(trebRange) / total
// var bassBins = fBins * bassRatio
// var midBins = fBins * midRatio
// var trebBins = fBins * trebRatio

// fmt.Println(bassRange, midRange, trebRange)
// fmt.Println(bassRatio, midRatio, trebRatio)
// fmt.Println(bassBins, midBins, trebBins)



// Monstercat does monstercat "smoothing"
//
// https://github.com/karlstav/cava/blob/master/cava.c#L157
//
// TODO(winter): make faster (rewrite)
//	slow and hungry as heck!
//	lets look into SIMD
func Monstercat(bins []float64, count int, factor float64) {

	// "pow is probably doing that same logarithm in every call, so you're
	//  extracting out half the work"
	var vFactP = math.Log(factor)

	for xBin := 1; xBin < count; xBin++ {

		for xTrgt := 0; xTrgt < count; xTrgt++ {

			if xBin != xTrgt {
				var tmp = bins[xBin]
				tmp /= math.Exp(vFactP * math.Abs(float64(xBin-xTrgt)))

				if tmp > bins[xTrgt] {
					bins[xTrgt] = tmp
				}
			}
		}
	}
}
